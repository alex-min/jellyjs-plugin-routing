// Generated by CoffeeScript 1.6.2
var async, executeDepencies, resolveDependencies;

async = require('async');

resolveDependencies = function(jelly, tplfile, curDeps, cb) {
  var deps, _ref;

  cb = cb || function() {};
  if ((_ref = curDeps.deps) == null) {
    curDeps.deps = [];
  }
  deps = tplfile.getLastOfProperty('dependencies') || [];
  if (deps.length === 0) {
    cb(null, curDeps);
    cb = function() {};
    return;
  }
  return async.each(deps, function(dep, cb) {
    var controller, controllerCoffee, controllerJs, curDep, executableContent, file, _i, _len, _ref1;

    file = jelly.getChildByIdRec(dep);
    if (file === null) {
      cb();
      cb = function() {};
      return;
    }
    controllerJs = jelly.getChildByIdRec(dep.replace('.tpl', '.js'));
    controllerCoffee = jelly.getChildByIdRec(dep.replace('.tpl', '.coffee'));
    controller = controllerCoffee || controllerJs;
    executableContent = controller.getLastContentOfExtension('__exec');
    if (executableContent === null) {
      cb();
      cb = function() {};
      return;
    }
    _ref1 = curDeps.deps;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      curDep = _ref1[_i];
      if (curDep.name === controller.getId()) {
        cb();
        cb = function() {};
        return;
      }
    }
    if (typeof executableContent.content !== 'object' && typeof executableContent.content.oncall !== 'function') {
      cb(new Error("Controller '" + (controller.getId()) + "' must provide an oncall function"));
      cb = function() {};
      return;
    }
    curDeps.deps.push({
      name: controller.getId(),
      oncall: executableContent.content.oncall
    });
    if (file.getId() === tplfile.getId()) {
      cb();
      cb = function() {};
    } else {
      return resolveDependencies(jelly, file, curDeps, cb);
    }
  }, function(err) {
    if (err) {
      cb(err);
      cb = function() {};
      return;
    }
    cb(null, curDeps);
    return cb = function() {};
  });
};

executeDepencies = function(deps, req, res, cb) {
  var finalData;

  finalData = {};
  return async.each(deps.deps, function(dep, cb) {
    var e;

    try {
      dep.oncall({
        req: req,
        res: res
      }, function(err, data) {
        if (err) {
          cb(err);
          cb = function() {};
          return;
        }
        if (data == null) {
          data = {};
        }
        finalData[dep.name.replace('.js', '.tpl').replace('.coffee', '.tpl')] = data;
        cb(null, finalData);
        return cb = function() {};
      });
    } catch (_error) {
      e = _error;
      cb(new Error("" + dep.name + " Controller: " + e.message));
      cb = function() {};
    }
  }, function(err) {
    if (err) {
      cb(err);
      cb = function() {};
      return;
    }
    return cb(null, finalData);
  });
};

module.exports = {
  resolveDependencies: resolveDependencies,
  executeDepencies: executeDepencies,
  bindController: function(route, verb, httpserver, jelly, namefile, cb) {
    var content, tplfile;

    tplfile = jelly.getChildByIdRec(route.oncall.template);
    if (tplfile === null) {
      cb(new Error("The 'template' id '" + route.oncall.name + "' does not exist on route " + (JSON.stringify(route))));
      cb = function() {};
      return;
    }
    content = tplfile.getLastContentOfExtension('__template');
    if (content === null || typeof content.content !== 'function') {
      cb(new Error("Unable to route template '" + tplfile.getId + "': The file has not been compiled before routing"));
      cb = function() {};
      return;
    }
    resolveDependencies(jelly, tplfile, {}, function(err, deps) {
      var e;

      if (err != null) {
        cb(err);
        cb = function() {};
        return;
      }
      try {
        httpserver[verb](route.url, function(req, res) {
          return executeDepencies(deps, req, res, function(err, finalData) {
            return res.send(content.content(finalData));
          });
        });
        cb();
        return cb = function() {};
      } catch (_error) {
        e = _error;
        cb(e);
        return cb = function() {};
      }
    });
  }
};
