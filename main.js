// Generated by CoffeeScript 1.6.2
var Controller, async, controllerRender, parseRoute;

async = require('async');

Controller = require('./src/Controller');

controllerRender = require('./src/controllerRender');

parseRoute = function(route, httpserver, jelly, cb) {
  var e, i, method, _base, _i, _len, _ref, _ref1, _ref2;

  try {
    if (typeof route.method === 'undefined' || route.method === null) {
      cb();
      cb = function() {};
      return;
    }
    if ((_ref = route.method) == null) {
      route.method = ['get'];
    }
    _ref1 = route.method;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      method = _ref1[i];
      route.method[i] = method.toLowerCase();
    }
    if (typeof route.url === 'undefined' || route.url === null) {
      cb(new Error("There is no url defined on route " + (JSON.stringify(route))));
      cb = function() {};
      return;
    }
    if (typeof route['oncall'] === 'undefined' || route['oncall'] === null) {
      cb(new Error("There is no oncall defined on route " + (JSON.stringify(route))));
      cb = function() {};
      return;
    }
    if ((_ref2 = (_base = route.oncall).type) == null) {
      _base.type = "rawview";
    }
    return async.each(route.method, function(verb, cb) {
      var file, tpl;

      if (['get', 'post', 'put', 'delete'].indexOf(verb) === -1) {
        cb(new Error("Invalid HTTP Verb '" + verb + "' on route " + (JSON.stringify(route))));
        cb = function() {};
        return;
      }
      if (['rawview', 'controller'].indexOf(route.oncall.type) === -1) {
        cb(new Error("Unsupported oncall route type: " + route.oncall.type + " on route " + (JSON.stringify(route))));
        cb = function() {};
        return;
      }
      file = jelly.getChildByIdRec(route.oncall.name);
      if (file === null) {
        cb(new Error("The id '" + route.oncall.name + "' does not exist on route " + (JSON.stringify(route))));
        cb = function() {};
        return;
      }
      tpl = file.getLastContentOfExtension('__template');
      if (route.oncall.type === 'rawview') {
        httpserver[verb](route.url, function(res, req) {
          if (typeof tpl.content === 'string') {
            return req.send(tpl.content);
          } else {
            return req.send(tpl.content());
          }
        });
        cb();
        return cb = function() {};
      } else if (route.oncall.type === 'controller') {
        return controllerRender.bindController(route, verb, httpserver, jelly, file, function(err) {
          return cb(err);
        });
      }
    }, cb);
  } catch (_error) {
    e = _error;
    cb(e);
    return cb = function() {};
  }
};

module.exports = {
  load: function(cb) {
    return cb();
  },
  oncall: function(onj, params, cb) {
    var e, httpserver, jelly, _base, _base1, _ref, _ref1;

    try {
      if ((_ref = (_base = params.pluginParameters).routing) == null) {
        _base.routing = {};
      }
      if ((_ref1 = (_base1 = params.pluginParameters.routing).routes) == null) {
        _base1.routes = [];
      }
      httpserver = this.getSharedObjectManager().getObject('httpserver', 'server');
      if (httpserver === null) {
        cb(new Error("No httpserver is registred when loading the routing plugin"));
        cb = function() {};
        return;
      }
      httpserver = httpserver.getCurrentContent();
      if (httpserver === null) {
        cb(new Error("No httpserver is registred when loading the routing plugin"));
        cb = function() {};
        return;
      }
      jelly = this.getParentOfClass('Jelly');
      if (jelly === null) {
        cb(new Error("The routing plugin must bound to a Jelly class"));
        cb = function() {};
        return;
      }
      return async.each(params.pluginParameters.routing.routes, function(route, cb) {
        return parseRoute(route, httpserver, jelly, cb);
      }, function(err) {
        return cb(err);
      });
    } catch (_error) {
      e = _error;
      return cb(e);
    }
  },
  unload: function(cb) {
    return cb();
  }
};
