// Generated by CoffeeScript 1.6.2
var parseRoute;

parseRoute = function(route, httpserver) {
  var i, method, _base, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results;

  if (typeof route.method === 'undefined' || route.method === null) {
    return;
  }
  if ((_ref = route.method) == null) {
    route.method = ['get'];
  }
  _ref1 = route.method;
  for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
    method = _ref1[i];
    route.method[i] = method.toLowerCase();
  }
  if (typeof route.url === 'undefined' || route.url === null) {
    throw new Error("There is no url defined on route " + (JSON.stringify(route)));
  }
  if (typeof route['oncall'] === 'undefined' || route['oncall'] === null) {
    throw new Error("There is no oncall defined on route " + (JSON.stringify(route)));
  }
  if ((_ref2 = (_base = route.oncall).type) == null) {
    _base.type = "rawview";
  }
  _ref3 = route.method;
  _results = [];
  for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
    method = _ref3[_j];
    if (['get', 'post', 'put', 'delete'].indexOf(method) === -1) {
      throw new Error("Invalid HTTP Verb on route " + (JSON.stringify(route)));
    }
    if (['rawview'].indexOf(route.oncall.type) === -1) {
      throw new Error("Unsupported oncall route type: " + route.oncall.type);
      _results.push(httpserver[method](route.url, function(res, req) {
        return res.send("TODO: IMPLEMENT RAWVIEWS");
      }));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

module.exports = {
  load: function(cb) {
    return cb();
  },
  oncall: function(onj, params, cb) {
    var e, httpserver, route, _base, _base1, _i, _len, _ref, _ref1, _ref2;

    try {
      if ((_ref = (_base = params.pluginParameters).routing) == null) {
        _base.routing = {};
      }
      if ((_ref1 = (_base1 = params.pluginParameters.routing).routes) == null) {
        _base1.routes = [];
      }
      httpserver = this.getSharedObjectManager().getObject('httpserver', 'server');
      if (httpserver === null) {
        cb(new Error("No httpserver is registred when loading the routing plugin"));
        cb = function() {};
        return;
      }
      httpserver = httpserver.getCurrentContent();
      if (httpserver === null) {
        cb(new Error("No httpserver is registred when loading the routing plugin"));
        cb = function() {};
        return;
      }
      _ref2 = params.pluginParameters.routing.routes;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        route = _ref2[_i];
        parseRoute(route, httpserver);
      }
      cb();
      return cb = function() {};
    } catch (_error) {
      e = _error;
      return cb(e);
    }
  },
  unload: function(cb) {
    return cb();
  }
};
