// Generated by CoffeeScript 1.6.2
var assert, async, e, jy, path, pluginDir, root, toType;

pluginDir = __dirname + '/../';

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

assert = require('chai').assert;

async = require('async');

path = require('path');

try {
  jy = require('jellyjs');
} catch (_error) {
  e = _error;
  root = __dirname + '/../../../../';
  jy = require("" + root + "/index.js");
}

describe('#Plugin::routing', function() {
  it('Should load the plugin', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
      return cb(err);
    });
  });
  return it('Should transform everything into templates', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    jelly.setRootDirectory("" + __dirname + "/demo");
    return async.series([
      function(cb) {
        return jelly.readJellyConfigurationFile(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.readAllGeneralConfigurationFiles(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
          return cb(err);
        });
      }, function(cb) {
        var httpServerPlugin;

        httpServerPlugin = path.dirname(require.resolve('jellyjs-plugin-httpserver'));
        return jelly.getPluginDirectoryList().readPluginFromPath(httpServerPlugin, 'httpserver', cb);
      }, function(cb) {
        var httpServerPlugin;

        httpServerPlugin = path.dirname(require.resolve('jellyjs-plugin-template'));
        return jelly.getPluginDirectoryList().readPluginFromPath(httpServerPlugin, 'template', cb);
      }, function(cb) {
        return jelly.applyPluginsSpecified(true, function(err) {
          return cb(err);
        });
      }, function(cb) {
        var content, file;

        try {
          file = jelly.getChildByIdRec('module1-file1.tpl');
          content = file.getCurrentContent();
          assert.equal(content.extension, '__template');
          assert.equal(toType(content.content), 'function');
          assert.equal(content.content(), 'TPL TEST');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      }
    ], function(err) {
      return cb(err);
    });
  });
});
