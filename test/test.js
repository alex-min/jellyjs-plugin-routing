// Generated by CoffeeScript 1.6.2
var assert, async, e, jy, path, pluginDir, populateWithHttp, portCount, request, root, toType;

pluginDir = __dirname + '/../';

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

assert = require('chai').assert;

async = require('async');

path = require('path');

request = require('request');

try {
  jy = require('jellyjs');
} catch (_error) {
  e = _error;
  root = __dirname + '/../../../../';
  jy = require("" + root + "/index.js");
}

portCount = 0;

populateWithHttp = function(params, cb) {
  var jelly;

  jelly = new jy.Jelly();
  return async.waterfall([
    function(cb) {
      var httpServerPlugin;

      httpServerPlugin = path.dirname(require.resolve('jellyjs-plugin-httpserver'));
      return jelly.getPluginDirectoryList().readPluginFromPath(httpServerPlugin, 'httpserver', cb);
    }, function(dt, cb) {
      portCount++;
      return dt.getPluginInterface().oncall({}, {
        pluginParameters: {
          httpserver: {
            port: 3000 + portCount
          }
        }
      }, function(err) {
        return cb();
      });
    }, function(cb) {
      return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
        return cb(err, dt);
      });
    }, function(dt, cb) {
      return dt.getPluginInterface().load(function(err) {
        return cb(err, dt);
      });
    }, function(dt, cb) {
      return dt.getPluginInterface().oncall({}, params, function(err) {
        return cb(err);
      });
    }
  ], cb);
};

describe('#Plugin::routing', function() {
  it('Should load the plugin', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
      return cb(err);
    });
  });
  it('Should return an error when no httpserver is loaded', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return async.waterfall([
      function(cb) {
        return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
          return cb(err, dt);
        });
      }, function(dt, cb) {
        return dt.getPluginInterface().load(function(err) {
          return cb(err, dt);
        });
      }, function(dt, cb) {
        return dt.getPluginInterface().oncall({}, {
          pluginParameters: {}
        }, function(err) {
          try {
            assert.equal(toType(err), 'error');
            return cb();
          } catch (_error) {
            e = _error;
            return cb(e);
          }
        });
      }
    ], cb);
  });
  it('Should raise an error if route.url is undefined', function(cb) {
    return populateWithHttp({
      pluginParameters: {
        routing: {
          routes: [
            {
              method: ["get"],
              oncall: {}
            }
          ]
        }
      }
    }, function(err) {
      try {
        assert.equal(toType(err), 'error');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  it('Should raise an error if there is an invalid method as an HTTP Verb', function(cb) {
    return populateWithHttp({
      pluginParameters: {
        routing: {
          routes: [
            {
              method: ['invalid'],
              url: '/',
              oncall: {}
            }
          ]
        }
      }
    }, function(err) {
      try {
        assert.equal(toType(err), 'error');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  it('Should raise an error if there is an invalid method as oncall', function(cb) {
    return populateWithHttp({
      pluginParameters: {
        routing: {
          routes: [
            {
              method: ['get', 'post'],
              url: '/',
              oncall: {
                type: "invalid"
              }
            }
          ]
        }
      }
    }, function(err) {
      try {
        assert.equal(toType(err), 'error');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  it('Should route rawviews', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    jelly.setRootDirectory("" + __dirname + "/demo");
    return async.series([
      function(cb) {
        return jelly.readJellyConfigurationFile(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.readAllGeneralConfigurationFiles(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'routing', function(err, dt) {
          return cb(err);
        });
      }, function(cb) {
        var httpServerPlugin;

        httpServerPlugin = path.dirname(require.resolve('jellyjs-plugin-httpserver'));
        return jelly.getPluginDirectoryList().readPluginFromPath(httpServerPlugin, 'httpserver', cb);
      }, function(cb) {
        var httpServerPlugin;

        httpServerPlugin = path.dirname(require.resolve('jellyjs-plugin-template'));
        return jelly.getPluginDirectoryList().readPluginFromPath(httpServerPlugin, 'template', cb);
      }, function(cb) {
        var cf, config;

        config = jelly.getChildByIdRec("conf/assets.json");
        cf = config.getLastExecutableContent();
        cf.pluginParameters.httpserver.port = 8101;
        return cb();
      }, function(cb) {
        return jelly.applyPluginsSpecified(true, function(err) {
          return cb(err);
        });
      }, function(cb) {
        return request("http://127.0.0.1:8101", function(err, response, body) {
          if (err != null) {
            cb(err);
            cb = function() {};
            return;
          }
          try {
            assert.equal(response.body, "TPL TEST");
            return cb();
          } catch (_error) {
            e = _error;
            return cb(e);
          }
        });
      }
    ], function(err) {
      return cb(err);
    });
  });
  it('Should route rawviews', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demo",
      packagePlugins: ['httpserver', 'template'],
      folderPlugins: [
        {
          name: 'routing',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var cf, config;

        config = jelly.getChildByIdRec("conf/assets.json");
        cf = config.getLastExecutableContent();
        cf.pluginParameters.httpserver.port = 8102;
        return cb();
      },
      localRequire: function(elm, cb) {
        try {
          return cb(null, require.resolve(elm));
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      }
    }, function(err) {
      return cb(err);
    });
  });
  it('Should route controllers', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoController",
      packagePlugins: ['httpserver', 'template', 'compilejs'],
      folderPlugins: [
        {
          name: 'routing',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var cf, config;

        config = jelly.getChildByIdRec("conf/assets.json");
        cf = config.getLastExecutableContent();
        cf.pluginParameters.httpserver.port = 8103;
        return cb();
      },
      localRequire: function(elm, cb) {
        try {
          return cb(null, require.resolve(elm));
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      }
    }, function(err) {
      if (err) {
        cb(err);
        cb = function() {};
        return;
      }
      return request("http://127.0.0.1:8103", function(err, response, body) {
        if (err != null) {
          cb(err);
          cb = function() {};
          return;
        }
        try {
          assert.equal(body, "TPL TEST 1TPL TEST22");
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
  });
  return it('Should pass parameters to the controller', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoControllerParams",
      packagePlugins: ['httpserver', 'template', 'compilejs'],
      folderPlugins: [
        {
          name: 'routing',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var cf, config;

        config = jelly.getChildByIdRec("conf/assets.json");
        cf = config.getLastExecutableContent();
        cf.pluginParameters.httpserver.port = 8104;
        return cb();
      },
      localRequire: function(elm, cb) {
        try {
          return cb(null, require.resolve(elm));
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      }
    }, function(err) {
      var file;

      if (err) {
        cb(err);
        cb = function() {};
        return;
      }
      file = jelly.getChildByIdRec('module1-file1.js');
      return request("http://127.0.0.1:8104/?id=helloWorld", function(err, response, body) {
        if (err != null) {
          cb(err);
          cb = function() {};
          return;
        }
        try {
          assert.equal(body, "TPL TEST helloWorldTPL TEST2helloWorld");
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
  });
});
